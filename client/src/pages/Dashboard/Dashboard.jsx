import './Dashboard.css';
import { useEffect, useState, useRef } from "react";
import { fetchDashboardData } from "../../Service/Dashboard.js";
import toast from "react-hot-toast";
import {
    BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer
} from 'recharts';
import jsPDF from 'jspdf';


const Dashboard = () => {
    const [data, setData] = useState(null);
    const [loading, setLoading] = useState(true);
    const [monthlySales, setMonthlySales] = useState([]);
    const [selectedMonth, setSelectedMonth] = useState("Jan");
    const [selectedYear, setSelectedYear] = useState(2025);
    const chartRef = useRef(null);

    useEffect(() => {
        const loadData = async () => {
            try {
                const response = await fetchDashboardData();
                setData(response.data);
                const sales = getMonthlySales(response.data.recentOrders, selectedYear);
                setMonthlySales(sales);
            } catch (error) {
                console.error(error);
                toast.error("Unable to view the data");
            } finally {
                setLoading(false);
            }
        };
        loadData();
    }, []);

    // Recalculate when year is changed
    useEffect(() => {
        if (data?.recentOrders) {
            setMonthlySales(getMonthlySales(data.recentOrders, selectedYear));
        }
    }, [selectedYear]);

    const getMonthlySales = (orders, year) => {
        const months = Array.from({ length: 12 }, (_, i) => {
            const date = new Date(year, i);
            const month = date.toLocaleString('default', { month: 'short' });
            return { month, sales: 0 };
        });

        orders.forEach(order => {
            const date = new Date(order.createdAt);
            if (date.getFullYear() === year) {
                const monthIndex = date.getMonth();
                months[monthIndex].sales += order.grandTotal;
            }
        });

        return months.map(m => ({
            ...m,
            sales: parseFloat(m.sales.toFixed(2))
        }));
    };

   const downloadPdf = () => {
    const doc = new jsPDF("p", "mm", "a4");
    const pageWidth = doc.internal.pageSize.getWidth();

    // === 1. HEADER ===
    doc.setFont("helvetica", "bold");
    doc.setFontSize(16);
    doc.text("Monthly Sales Report", pageWidth / 2, 15, { align: "center" });

    doc.setFontSize(10);
    doc.setFont("helvetica", "normal");
    doc.text(`Month: ${selectedMonth} ${selectedYear}`, 20, 25);
    doc.text("Company: Your Company Name", 20, 30);
    doc.text("Generated by: BillingSoftware", 20, 35);
    doc.text(`Date: ${new Date().toLocaleDateString()}`, pageWidth - 20, 25, { align: "right" });

    // === 2. TABLE HEADERS ===
    let y = 45;
    doc.setFont("helvetica", "bold");
    doc.setFontSize(10);
    const headers = ["Order ID", "Customer", "Phone", "Date", "Amount", "Method", "Status"];
    const colWidths = [30, 30, 25, 25, 25, 25, 25];
    let x = 10;

    headers.forEach((header, i) => {
        doc.text(header, x + 1, y);
        x += colWidths[i];
    });

    // === 3. TABLE BODY ===
    y += 6;
    doc.setFont("helvetica", "normal");

    const monthIndex = new Date(`${selectedMonth} 1, ${selectedYear}`).getMonth();
    const orders = data.recentOrders.filter(order => {
        const d = new Date(order.createdAt);
        return d.getMonth() === monthIndex && d.getFullYear() === selectedYear;
    });

    let totalAmount = 0;

    orders.forEach(order => {
        if (y > 270) {
            doc.addPage();
            y = 20;
        }

        const dateStr = new Date(order.createdAt).toLocaleDateString();
        const status = order.paymentDetails?.status || "UNKNOWN";

        x = 10;
        const row = [
            order.orderId.substring(0, 10) + "...",
            order.customerName,
            order.phoneNumber,
            dateStr,
            `${order.grandTotal.toFixed(2)}`,
            order.paymentMethod,
            status
        ];

        row.forEach((text, i) => {
            doc.text(text.toString(), x + 1, y);
            x += colWidths[i];
        });

        totalAmount += order.grandTotal;
        y += 6;
    });

    // === 4. FOOTER SUMMARY ===
    y += 10;
    doc.setFont("helvetica", "bold");
    doc.text(`Total Orders: ${orders.length}`, 10, y);
    doc.text(`Total Amount: ${totalAmount.toFixed(2)}`, 100, y);

    // === 5. SIGNATURES ===
    y += 20;
    doc.setFont("helvetica", "normal");
    doc.text("Prepared By: _______________________", 20, y);
    doc.text("Manager Signature: _______________________", 110, y);

    // === 6. SAVE ===
    doc.save(`Monthly_Sales_Report_${selectedMonth}_${selectedYear}.pdf`);
};


    if (loading) {
        return <div className="loading">Loading dashboard...</div>;
    }

    if (!data) {
        return <div className="error">Failed to load the dashboard data...</div>;
    }

    return (
        <div className="dashboard-wrapper">
            <div className="dashboard-container">

                {/* Stats */}
                <div className="stats-grid">
                    <div className="stat-card">
                        <div className="stat-icon">
                            <i className="bi bi-currency-rupee"></i>
                        </div>
                        <div className="stat-content">
                            <h3>Today's Sales</h3>
                            <p>₹{data.todaySales.toFixed(2)}</p>
                        </div>
                    </div>
                    <div className="stat-card">
                        <div className="stat-icon">
                            <i className="bi bi-cart-check"></i>
                        </div>
                        <div className="stat-content">
                            <h3>Today's Orders</h3>
                            <p>{data.todayOrderCount}</p>
                        </div>
                    </div>
                </div>

                {/* Monthly Sales Chart */}
                <div className="chart-container">
                    <div className="chart-header">
                        <h3 className="chart-title">
                            <i className="bi bi-bar-chart"></i> Monthly Sales
                        </h3>
                        <div className="chart-controls">
                            <select value={selectedMonth} onChange={(e) => setSelectedMonth(e.target.value)}>
                                {monthlySales.map((m) => (
                                    <option key={m.month} value={m.month}>{m.month}</option>
                                ))}
                            </select>
                            <select value={selectedYear} onChange={(e) => setSelectedYear(Number(e.target.value))}>
                                {[2023, 2024, 2025].map((year) => (
                                    <option key={year} value={year}>{year}</option>
                                ))}
                            </select>
                            <button onClick={downloadPdf}>Download PDF</button>
                        </div>
                    </div>
                    <div ref={chartRef}>
    <ResponsiveContainer width="100%" height={300}>
        <BarChart data={monthlySales}>
            <CartesianGrid strokeDasharray="3 3" />
            <XAxis dataKey="month" />
            <YAxis />
            <Tooltip />
            <Bar dataKey="sales" fill="#8884d8" />
        </BarChart>
    </ResponsiveContainer>
</div>

                    
                </div>

                {/* Recent Orders */}
                <div className="recent-orders-card">
                    <h3 className="recent-orders-title">
                        <i className="bi bi-clock-history"></i>
                        Recent Orders
                    </h3>
                    <div className="orders-table-container">
                        <table className="orders-table">
                            <thead>
                                <tr>
                                    <th>Order Id</th>
                                    <th>Customer</th>
                                    <th>Amount</th>
                                    <th>Payment</th>
                                    <th>Status</th>
                                    <th>Time</th>
                                </tr>
                            </thead>
                            <tbody>
                                {data.recentOrders.map((order) => (
                                    <tr key={order.orderId}>
                                        <td>{order.orderId.substring(0, 8)}...</td>
                                        <td>{order.customerName}</td>
                                        <td>₹{order.grandTotal.toFixed(2)}</td>
                                        <td>
                                            <span className={`payment-method ${order.paymentMethod.toLowerCase()}`}>
                                                {order.paymentMethod}
                                            </span>
                                        </td>
                                        <td>
                                            <span className={`status-badge ${order.paymentDetails.status.toLowerCase()}`}>
                                                {order.paymentDetails.status}
                                            </span>
                                        </td>
                                        <td>
                                            {new Date(order.createdAt).toLocaleDateString([], {
                                                hour: '2-digit',
                                                minute: '2-digit',
                                            })}
                                        </td>
                                    </tr>
                                ))}
                            </tbody>
                        </table>
                    </div>
                </div>

            </div>
        </div>
    );
};

export default Dashboard;
